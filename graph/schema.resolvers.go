package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/jawherkl/go-crud-graphql/graph/generated"
	"github.com/jawherkl/go-crud-graphql/graph/model"
)

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	movie := model.Movie{
		Title:       input.Title,
		URL:         input.URL,
		ReleaseDate: time.Now().Format("2006-01-02"), // Format de la date actuelle
	}

	_, err := r.DB.Model(&movie).Insert()
	if err != nil {
		return nil, fmt.Errorf("error inserting new movie: %v", err)
	}

	return &movie, nil
}

// UpdateMovie is the resolver for the updateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, input model.UpdateMovie) (*model.Movie, error) {
	movie := &model.Movie{ID: input.ID}
	err := r.DB.Select(movie)
	if err != nil {
		return nil, fmt.Errorf("movie not found: %v", err)
	}

	if input.Title != nil {
		movie.Title = *input.Title
	}
	if input.URL != nil {
		movie.URL = *input.URL
	}

	_, err = r.DB.Model(movie).WherePK().Update()
	if err != nil {
		return nil, fmt.Errorf("error updating movie: %v", err)
	}

	return movie, nil
}

// DeleteMovie is the resolver for the deleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, id string) (bool, error) {
	movie := &model.Movie{ID: id}
	_, err := r.DB.Model(movie).WherePK().Delete()
	if err != nil {
		return false, fmt.Errorf("error deleting movie: %v", err)
	}
	return true, nil
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	var movies []*model.Movie

	err := r.DB.Model(&movies).Select()
	if err != nil {
		return nil, err
	}

	return movies, nil
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, id string) (*model.Movie, error) {
	movie := &model.Movie{ID: id}
	err := r.DB.Select(movie)
	if err != nil {
		return nil, fmt.Errorf("movie not found: %v", err)
	}
	return movie, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
